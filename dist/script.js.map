{"version":3,"sources":["script.js"],"names":["accordions","Array","from","document","querySelectorAll","forEach","accordion","allowMultiple","hasAttribute","allowToggle","triggers","addEventListener","event","target","classList","contains","isExpanded","getAttribute","active","querySelector","setAttribute","getElementById","removeAttribute","preventDefault","key","which","toString","ctrlModifier","ctrlKey","match","index","indexOf","direction","length","focus"],"mappings":"AAAA,aAOA,IAAMA,WAAaC,MAAMC,KAAKC,SAASC,iBAAiB,eACxDJ,WAAWK,SAAQ,SAACC,GAElB,IAAMC,EAAgBD,EAAUE,aAAa,uBAEvCC,EAAcF,GAEhBD,EAAUE,aAAa,qBAGrBE,EAAWT,MAAMC,KACrBI,EAAUF,iBAAiB,wBAG7BE,EAAUK,iBAAiB,SAAS,SAACC,GACnC,IAAQC,EAAWD,EAAXC,OAER,GAAIA,EAAOC,UAAUC,SAAS,sBAAuB,CAEnD,IAAMC,EAAsD,SAAzCH,EAAOI,aAAa,iBACjCC,EAASZ,EAAUa,cAAc,2BAGlCZ,GAAiBW,GAAUA,IAAWL,IAEzCK,EAAOE,aAAa,gBAAiB,SAErCjB,SACGkB,eAAeH,EAAOD,aAAa,kBACnCG,aAAa,SAAU,IAGrBX,GACHS,EAAOI,gBAAgB,kBAItBN,EAYMP,GAAeO,IAExBH,EAAOO,aAAa,gBAAiB,SAErCjB,SACGkB,eAAeR,EAAOI,aAAa,kBACnCG,aAAa,SAAU,MAhB1BP,EAAOO,aAAa,gBAAiB,QAErCjB,SACGkB,eAAeR,EAAOI,aAAa,kBACnCK,gBAAgB,UAGdb,GACHI,EAAOO,aAAa,gBAAiB,SAUzCR,EAAMW,gBACR,CACF,IAGAjB,EAAUK,iBAAiB,WAAW,SAACC,GACrC,IAAQC,EAAWD,EAAXC,OACFW,EAAMZ,EAAMa,MAAMC,WAGlBC,EAAef,EAAMgB,SAAWJ,EAAIK,MAAM,SAGhD,GAAIhB,EAAOC,UAAUC,SAAS,sBAG5B,GAAIS,EAAIK,MAAM,UAAYF,EAAc,CACtC,IAAMG,EAAQpB,EAASqB,QAAQlB,GACzBmB,EAAYR,EAAIK,MAAM,SAAW,GAAK,EACpCI,EAAWvB,EAAXuB,OAGRvB,GAFkBoB,EAAQG,EAASD,GAAaC,GAE7BC,QAEnBtB,EAAMW,gBACR,MAAO,GAAIC,EAAIK,MAAM,SAAU,CAE7B,OAAQL,GAEN,IAAK,KACHd,EAAS,GAAGwB,QACZ,MAEF,IAAK,KACHxB,EAASA,EAASuB,OAAS,GAAGC,QAKlCtB,EAAMW,gBACR,CAEJ,GAGF","file":"script.js","sourcesContent":["/*\n *   This content is licensed according to the W3C Software License at\n *   https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n *   Simple accordion pattern example\n */\n\nconst accordions = Array.from(document.querySelectorAll('.accordion'));\naccordions.forEach((accordion) => {\n  // Allow for multiple accordion sections to be expanded at the same time\n  const allowMultiple = accordion.hasAttribute('data-allow-multiple');\n  // Allow for each toggle to both open and close individually\n  const allowToggle = allowMultiple\n    ? allowMultiple\n    : accordion.hasAttribute('data-allow-toggle');\n\n  // Create the array of toggle elements for the accordion group\n  const triggers = Array.from(\n    accordion.querySelectorAll('.accordion__trigger')\n  );\n\n  accordion.addEventListener('click', (event) => {\n    const { target } = event;\n\n    if (target.classList.contains('accordion__trigger')) {\n      // Check if the current toggle is expanded.\n      const isExpanded = target.getAttribute('aria-expanded') === 'true';\n      const active = accordion.querySelector('[aria-expanded=\"true\"]');\n\n      // without allowMultiple, close the open accordion\n      if (!allowMultiple && active && active !== target) {\n        // Set the expanded state on the triggering element\n        active.setAttribute('aria-expanded', 'false');\n        // Hide the accordion sections, using aria-controls to specify the desired section\n        document\n          .getElementById(active.getAttribute('aria-controls'))\n          .setAttribute('hidden', '');\n\n        // When toggling is not allowed, clearn up the disabled state\n        if (!allowToggle) {\n          active.removeAttribute('aria-disabled');\n        }\n      }\n\n      if (!isExpanded) {\n        // Set the expanded sstate on the triggering element\n        target.setAttribute('aria-expanded', 'true');\n        // Hide the accordion sections, using aria-controls to specify the desired section\n        document\n          .getElementById(target.getAttribute('aria-controls'))\n          .removeAttribute('hidden');\n\n        // If toggling is not allowed, set disabled state on trigger\n        if (!allowToggle) {\n          target.setAttribute('aria-disabled', 'true');\n        }\n      } else if (allowToggle && isExpanded) {\n        // Set the expanded state on the triggering element\n        target.setAttribute('aria-expanded', 'false');\n        // Hide the accordion sections, using aria-controls to specify the desired section\n        document\n          .getElementById(target.getAttribute('aria-controls'))\n          .setAttribute('hidden', '');\n      }\n      event.preventDefault();\n    }\n  });\n\n  // Bind keyboard behaviors on the main accordion container\n  accordion.addEventListener('keydown', (event) => {\n    const { target } = event;\n    const key = event.which.toString();\n\n    // 33 = Page Up, 34 = Page Down\n    const ctrlModifier = event.ctrlKey && key.match(/33|34/);\n\n    // Is this coming from an accordion header?\n    if (target.classList.contains('accordion__trigger')) {\n      // Up/ Down arrow and Control + Page Up/ Page Down keyboard operations\n      // 38 = Up, 40 = Down\n      if (key.match(/38|40/) || ctrlModifier) {\n        const index = triggers.indexOf(target);\n        const direction = key.match(/34|40/) ? 1 : -1;\n        const { length } = triggers;\n        const newIndex = (index + length + direction) % length;\n\n        triggers[newIndex].focus();\n\n        event.preventDefault();\n      } else if (key.match(/35|36/)) {\n        // 35 = End, 36 = Home keyboard operations\n        switch (key) {\n          // Go to first accordion\n          case '36':\n            triggers[0].focus();\n            break;\n          // Go to last accordion\n          case '35':\n            triggers[triggers.length - 1].focus();\n            break;\n          default:\n            break;\n        }\n        event.preventDefault();\n      }\n    }\n  });\n\n  // These are used to style the accordion when one of the buttons has focus\n}); // End of accordions.forEach()\n"]}