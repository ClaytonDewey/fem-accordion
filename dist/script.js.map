{"version":3,"sources":["script.js"],"names":["Array","prototype","slice","call","document","querySelectorAll","forEach","accordion","allowMultiple","hasAttribute","allowToggle","triggers","addEventListener","event","target","classList","contains","isExpanded","getAttribute","active","querySelector","setAttribute","getElementById","removeAttribute","preventDefault","key","which","toString","ctrlModifier","ctrlKey","match","index","indexOf","direction","length","focus","trigger","add","remove","expanded"],"mappings":"AAAA,aAOAA,MAAMC,UAAUC,MACbC,KAAKC,SAASC,iBAAiB,eAC/BC,SAAQ,SAACC,GAER,IAAMC,EAAgBD,EAAUE,aAAa,uBAEvCC,EAAcF,GAEhBD,EAAUE,aAAa,qBAGrBE,EAAWX,MAAMC,UAAUC,MAAMC,KACrCI,EAAUF,iBAAiB,wBAEdL,MAAMC,UAAUC,MAAMC,KACnCI,EAAUF,iBAAiB,sBA6G7B,GA1GAE,EAAUK,iBAAiB,SAAS,SAACC,GACnC,IAAMC,EAASD,EAAMC,OAErB,GAAIA,EAAOC,UAAUC,SAAS,sBAAuB,CAEnD,IAAMC,EAAsD,SAAzCH,EAAOI,aAAa,iBACjCC,EAASZ,EAAUa,cAAc,2BAGlCZ,GAAiBW,GAAUA,IAAWL,IAEzCK,EAAOE,aAAa,gBAAiB,SAErCjB,SACGkB,eAAeH,EAAOD,aAAa,kBACnCG,aAAa,SAAU,IAGrBX,GACHS,EAAOI,gBAAgB,kBAItBN,EAYMP,GAAeO,IAExBH,EAAOO,aAAa,gBAAiB,SAErCjB,SACGkB,eAAeR,EAAOI,aAAa,kBACnCG,aAAa,SAAU,MAhB1BP,EAAOO,aAAa,gBAAiB,QAErCjB,SACGkB,eAAeR,EAAOI,aAAa,kBACnCK,gBAAgB,UAGdb,GACHI,EAAOO,aAAa,gBAAiB,SAWzCR,EAAMW,gBACR,CACF,IAGAjB,EAAUK,iBAAiB,WAAW,SAACC,GACrC,IAAQC,EAAWD,EAAXC,OACFW,EAAMZ,EAAMa,MAAMC,WAQlBC,GANad,EAAOI,aAAa,iBACrBV,GAEdD,EAAUE,aAAa,qBAGNI,EAAMgB,SAAWJ,EAAIK,MAAM,UAGhD,GAAIhB,EAAOC,UAAUC,SAAS,sBAG5B,GAAIS,EAAIK,MAAM,UAAYF,EAAc,CACtC,IAAMG,EAAQpB,EAASqB,QAAQlB,GACzBmB,EAAYR,EAAIK,MAAM,SAAW,GAAK,EACpCI,EAAWvB,EAAXuB,OAGRvB,GAFkBoB,EAAQG,EAASD,GAAaC,GAE7BC,QAEnBtB,EAAMW,gBACR,MAAO,GAAIC,EAAIK,MAAM,SAAU,CAE7B,OAAQL,GAEN,IAAK,KACHd,EAAS,GAAGwB,QACZ,MAEF,IAAK,KACHxB,EAASA,EAASuB,OAAS,GAAGC,QAKlCtB,EAAMW,gBACR,CAEJ,IAGAjB,EAAUF,iBAAiB,uBAAuBC,SAAQ,SAAC8B,GACzDA,EAAQxB,iBAAiB,SAAS,WAChCL,EAAUQ,UAAUsB,IAAI,QAC1B,IAEAD,EAAQxB,iBAAiB,QAAQ,WAC/BL,EAAUQ,UAAUuB,OAAO,QAC7B,GACF,KAIK5B,EAAa,CAEhB,IAAM6B,EAAWhC,EAAUa,cAAc,0BAGrCmB,GACFA,EAASlB,aAAa,gBAAiB,OAE3C,CACF","file":"script.js","sourcesContent":["/*\n *   This content is licensed according to the W3C Software License at\n *   https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n *   Simple accordion pattern example\n */\n\nArray.prototype.slice\n  .call(document.querySelectorAll('.accordion'))\n  .forEach((accordion) => {\n    // Allow for multiple accordion sections to be expanded at the same time\n    const allowMultiple = accordion.hasAttribute('data-allow-multiple');\n    // Allow for each toggle to both open and close individually\n    const allowToggle = allowMultiple\n      ? allowMultiple\n      : accordion.hasAttribute('data-allow-toggle');\n\n    // Create the array of toggle elements for the accordion group\n    const triggers = Array.prototype.slice.call(\n      accordion.querySelectorAll('.accordion__trigger')\n    );\n    const panels = Array.prototype.slice.call(\n      accordion.querySelectorAll('.accordion__panel')\n    );\n\n    accordion.addEventListener('click', (event) => {\n      const target = event.target;\n\n      if (target.classList.contains('accordion__trigger')) {\n        // Check if the current toggle is expanded.\n        const isExpanded = target.getAttribute('aria-expanded') === 'true';\n        const active = accordion.querySelector('[aria-expanded=\"true\"]');\n\n        // without allowMultiple, close the open accordion\n        if (!allowMultiple && active && active !== target) {\n          // Set the expanded state on the triggering element\n          active.setAttribute('aria-expanded', 'false');\n          // Hide the accordion sections, using aria-controls to specify the desired section\n          document\n            .getElementById(active.getAttribute('aria-controls'))\n            .setAttribute('hidden', '');\n\n          // When toggling is not allowed, clean up disabled state\n          if (!allowToggle) {\n            active.removeAttribute('aria-disabled');\n          }\n        }\n\n        if (!isExpanded) {\n          // Set the expanded state on the triggering element\n          target.setAttribute('aria-expanded', 'true');\n          // Hide the accordion sections, using aria-controls to specify the desired section\n          document\n            .getElementById(target.getAttribute('aria-controls'))\n            .removeAttribute('hidden');\n\n          // If toggling is not allowed, set disabled state on trigger\n          if (!allowToggle) {\n            target.setAttribute('aria-disabled', 'true');\n          }\n        } else if (allowToggle && isExpanded) {\n          // Set the expanded state on the triggering element\n          target.setAttribute('aria-expanded', 'false');\n          // Hide the accordion sections, using aria-controls to specify the desired section\n          document\n            .getElementById(target.getAttribute('aria-controls'))\n            .setAttribute('hidden', '');\n        }\n\n        event.preventDefault();\n      }\n    });\n\n    // Bind keyboard behaviors on the main accordion container\n    accordion.addEventListener('keydown', (event) => {\n      const { target } = event;\n      const key = event.which.toString();\n\n      const isExpanded = target.getAttribute('aria-expanded') === 'true';\n      let allowToggle = allowMultiple\n        ? allowMultiple\n        : accordion.hasAttribute('data-allow-toggle');\n\n      // 33 = Page Up, 34 = Page Down\n      const ctrlModifier = event.ctrlKey && key.match(/33|34/);\n\n      // Is this coming from an accordion header?\n      if (target.classList.contains('accordion__trigger')) {\n        // Up/ Down arrow and Control + Page Up/ Page Down keyboard operations\n        // 38 = Up, 40 = Down\n        if (key.match(/38|40/) || ctrlModifier) {\n          const index = triggers.indexOf(target);\n          const direction = key.match(/34|40/) ? 1 : -1;\n          const { length } = triggers;\n          const newIndex = (index + length + direction) % length;\n\n          triggers[newIndex].focus();\n\n          event.preventDefault();\n        } else if (key.match(/35|36/)) {\n          // 35 = End, 36 = Home keyboard operations\n          switch (key) {\n            // Go to first accordion\n            case '36':\n              triggers[0].focus();\n              break;\n            // Go to last accordion\n            case '35':\n              triggers[triggers.length - 1].focus();\n              break;\n            default:\n              break;\n          }\n          event.preventDefault();\n        }\n      }\n    });\n\n    // These are used to style the accordion when one of the buttons has focus\n    accordion.querySelectorAll('.accordion__trigger').forEach((trigger) => {\n      trigger.addEventListener('focus', () => {\n        accordion.classList.add('focus');\n      });\n\n      trigger.addEventListener('blur', () => {\n        accordion.classList.remove('focus');\n      });\n    });\n\n    // Minor setup: will set disabled state, via aria-disabled, to an\n    // expanded/ active accordion which is not allowed to be toggled close\n    if (!allowToggle) {\n      // Get the first expanded/ active accordion\n      const expanded = accordion.querySelector('[aria-expanded=\"true\"]');\n\n      // If an expanded/ active accordion is found, disable\n      if (expanded) {\n        expanded.setAttribute('aria-disabled', 'true');\n      }\n    }\n  });\n"]}